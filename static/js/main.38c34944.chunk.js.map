{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["WORLD_WIDTH","WORLD_HEIGHT","DIRECTION","SNAKES","FOODS","App","useState","snakes","setSnakes","foods","setFoods","lose","setLose","eat","setEat","highestScore","setHighestScore","directionRef","useRef","disableEventRef","getRandomInt","min","max","Math","ceil","floor","random","generateRandomFoods","newFoods","newFood","indexOf","push","length","move","newSnakes","head","current","eatenFoodIndex","concat","splice","currentSnakes","currentFoods","generateFoods","slice","keydownHandler","e","code","setTimeout","useEffect","document","addEventListener","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","food","headHorizontalIndex","foodHorizontalIndex","newDirection","headVerticalIndex","foodVerticalIndex","newHead","findFood","className","rows","i","cols","j","index","cellClassName","renderWorld","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.38c34944.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useRef, useState } from 'react';\nimport './App.scss';\n\nconst WORLD_WIDTH = 32;\nconst WORLD_HEIGHT = 24;\nconst DIRECTION = {\n  UP: 0,\n  DOWN: 1,\n  RIGHT: 2,\n  LEFT: 3,\n};\nconst DELAY = 50;\nconst SNAKES = [4, 3, 2, 1, 0];\nconst FOODS = [];\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    const tick = () => {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nfunction App() {\n  const [snakes, setSnakes] = useState(SNAKES);\n  const [foods, setFoods] = useState(FOODS);\n  const [lose, setLose] = useState(false);\n  const [eat, setEat] = useState(0);\n  const [highestScore, setHighestScore] = useState(0);\n\n  const directionRef = useRef();\n  const disableEventRef = useRef();\n\n  const getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n\n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  const generateRandomFoods = () => {\n    const newFoods = [];\n\n    do {\n      let newFood = getRandomInt(0, WORLD_WIDTH * WORLD_HEIGHT);\n\n      if (snakes.indexOf(newFood) === -1 && newFoods.indexOf(newFood) === -1) {\n        newFoods.push(newFood);\n      }\n    } while(newFoods.length < 3);\n\n    setFoods(newFoods);\n  };\n\n  const generateFoods = (currentSnakes, currentFoods) => {\n    let newFood = 0;\n\n    do {\n      newFood = getRandomInt(0, WORLD_WIDTH * WORLD_HEIGHT);\n    } while (currentSnakes.indexOf(newFood) !== -1 || currentFoods.indexOf(newFood) !== -1);\n\n    const newFoods = [...currentFoods];\n\n    newFoods.push(newFood);\n\n    setFoods(newFoods);\n  };\n\n  const move = () => {\n    if (lose) {\n      return;\n    }\n\n    let newSnakes = [...snakes];\n    let head = newSnakes[0];\n\n    switch(directionRef.current) {\n      case DIRECTION.RIGHT:\n        if ((head + 1) % WORLD_WIDTH === 0) {\n          head -= WORLD_WIDTH - 1;\n        } else {\n          head++;\n        }\n\n        break;\n      case DIRECTION.LEFT:\n        if (head % WORLD_WIDTH === 0) {\n          head += WORLD_WIDTH - 1;\n        } else {\n          head--;\n        }\n\n        break;\n      case DIRECTION.UP:\n        if (head < WORLD_WIDTH) {\n          head += (WORLD_HEIGHT - 1) * WORLD_WIDTH;\n        } else {\n          head -= WORLD_WIDTH;\n        }\n\n        break;\n      case DIRECTION.DOWN:\n        if (head >= WORLD_WIDTH * (WORLD_HEIGHT - 1)) {\n          head -= WORLD_WIDTH * (WORLD_HEIGHT - 1);\n        } else {\n          head += WORLD_WIDTH;\n        }\n\n        break;\n      default:\n        break;\n    }\n\n    if (snakes.indexOf(head) !== -1) {\n      if (eat > highestScore) {\n        setHighestScore(eat);\n      }\n\n      setLose(true);\n\n      return;\n    }\n\n    const eatenFoodIndex = foods.indexOf(head);\n\n    if (eatenFoodIndex !== -1) {\n      newSnakes = [head].concat(newSnakes);\n\n      let newFoods = [...foods];\n      newFoods.splice(eatenFoodIndex, 1);\n\n      generateFoods(newSnakes, newFoods);\n\n      setEat(eat + 1);\n    } else {\n      newSnakes = [head].concat(newSnakes.slice(0, newSnakes.length - 1));\n    }\n\n    setSnakes(newSnakes);\n  };\n\n  const findFood = () => {\n    if (disableEventRef.current) {\n      return;\n    }\n\n    const food = foods[0];\n    const head = snakes[0];\n   \n    const headHorizontalIndex = head % WORLD_WIDTH;\n    const foodHorizontalIndex = food % WORLD_WIDTH;\n\n    let newDirection = null;\n\n    if (headHorizontalIndex < foodHorizontalIndex) {\n      if (directionRef.current === DIRECTION.LEFT) {\n        newDirection = DIRECTION.UP;\n      } else {\n        newDirection = DIRECTION.RIGHT;\n      }\n    } else if (headHorizontalIndex > foodHorizontalIndex) {\n      if (directionRef.current === DIRECTION.RIGHT) {\n        newDirection = DIRECTION.UP;\n      } else {\n        newDirection = DIRECTION.LEFT;\n      }\n    } else {\n      const headVerticalIndex = Math.ceil(head / WORLD_HEIGHT);\n      const foodVerticalIndex = Math.ceil(food / WORLD_HEIGHT);\n  \n      if (headVerticalIndex < foodVerticalIndex) {\n        if (directionRef.current === DIRECTION.UP) {\n          newDirection = DIRECTION.RIGHT;\n        } else {\n          newDirection = DIRECTION.DOWN;\n        }\n      } else if (headVerticalIndex > foodVerticalIndex) {\n        if (directionRef.current === DIRECTION.DOWN) {\n          newDirection = DIRECTION.RIGHT;\n        } else {\n          newDirection = DIRECTION.UP;\n        }\n      }\n    }\n\n    let newHead = null;\n\n    switch (newDirection) {\n      case DIRECTION.RIGHT:\n        if ((head + 1) % WORLD_WIDTH === 0) {\n          newHead = head - (WORLD_WIDTH - 1);\n        } else {\n          newHead = head + 1;\n        }\n\n        break;\n      case DIRECTION.LEFT:\n        if (head % WORLD_WIDTH === 0) {\n          newHead = head + (WORLD_WIDTH - 1);\n        } else {\n          newHead = head - 1;\n        }\n\n        break;\n      case DIRECTION.UP:\n        if (head < WORLD_WIDTH) {\n          newHead = head + ((WORLD_HEIGHT - 1) * WORLD_WIDTH);\n        } else {\n          newHead = head - WORLD_WIDTH;\n        }\n\n        break;\n      case DIRECTION.DOWN:\n        if (head >= WORLD_WIDTH * (WORLD_HEIGHT - 1)) {\n          newHead = head - (WORLD_WIDTH * (WORLD_HEIGHT - 1));\n        } else {\n          newHead = head + WORLD_WIDTH;\n        }\n\n        break;\n      default:\n        break;\n    }\n\n    if (newHead === null) {\n      return;\n    }\n\n    if (snakes.indexOf(newHead) !== -1) {\n      return;\n    }\n\n    directionRef.current = newDirection;\n  };\n\n  const keydownHandler = (e) => {\n    if (disableEventRef.current) {\n      return;\n    }\n\n    switch (e.code) {\n      case 'ArrowRight':\n        if (directionRef.current === DIRECTION.LEFT) {\n          return;\n        }\n\n        directionRef.current = DIRECTION.RIGHT;\n\n        break;\n      case 'ArrowLeft':\n        if (directionRef.current === DIRECTION.RIGHT) {\n          return;\n        }\n\n        directionRef.current = DIRECTION.LEFT;\n\n        break;\n      case 'ArrowUp':\n        if (directionRef === DIRECTION.DOWN) {\n          return;\n        }\n\n        directionRef.current = DIRECTION.UP;\n\n        break;\n      case 'ArrowDown':\n        if (directionRef.current === DIRECTION.UP) {\n          return;\n        }\n\n        directionRef.current = DIRECTION.DOWN;\n\n        break;\n      default:\n        break;\n    }\n\n    disableEventRef.current = true;\n\n    setTimeout(() => {\n      disableEventRef.current = false;\n    }, DELAY);\n  };\n\n  useEffect(() => {\n    directionRef.current = DIRECTION.RIGHT;\n    disableEventRef.current = false;\n\n    generateRandomFoods();\n\n    document.addEventListener('keydown', keydownHandler);\n  }, []);\n\n  useInterval(() => {\n    findFood();\n    move();\n  }, DELAY);\n\n  const renderWorld = () => {\n    const rows = [];\n\n    for (let i = 0, ii = WORLD_HEIGHT; i < ii; i++) {\n      const cols = [];\n\n      for (let j = 0, jj = WORLD_WIDTH; j < jj; j++) {\n        const index = i * WORLD_WIDTH + j;\n        let cellClassName = '';\n\n        if (snakes.indexOf(index) !== -1) {\n          cellClassName = ' snake';\n        } else if (foods.indexOf(index) !== -1) {\n          cellClassName = ' food';\n        }\n\n        cols.push(\n          <div key={`cell-${i}-${j}`} className={`w-cell${cellClassName}`}></div>\n        );\n      }\n\n      rows.push(\n        <div key={`row-${i}`} className=\"w-row\">{cols}</div>\n      );\n    }\n\n    return (\n      <div className=\"world\">{rows}</div>\n    );\n  };\n\n  const playAgainHandler = () => {\n    setSnakes(SNAKES);\n    generateRandomFoods();\n    setLose(false);\n    setEat(0);\n    directionRef.current = DIRECTION.RIGHT;\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"world-container\">\n        {renderWorld()}\n        <div className=\"info\">\n          <span>react-snake</span>\n          <br />\n          <br />\n          <span>-----</span>\n          <br />\n          <br />\n          <span>highest score: {highestScore}</span>\n          <br />\n          <br />\n          <span>-----</span>\n          <br />\n          <br />\n          <span>food eaten: {eat}</span>\n          <br />\n          <br />\n          <span>snake's size: {snakes.length}</span>\n          {\n            lose && (\n              <>\n                <br />\n                <br />\n                <span>-----</span>\n                <br />\n                <br />\n                <span>lose, </span>\n                <span className=\"play-again\" onClick={playAgainHandler}>play again</span>\n              </>\n            )\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}